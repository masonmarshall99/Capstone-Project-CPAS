# Generated by Django 4.2.23 on 2025-08-07 10:48

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Crops',
            fields=[
                ('crop_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Disease',
            fields=[
                ('disease_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('disease_group', models.CharField(blank=True, max_length=255, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Season',
            fields=[
                ('year', models.CharField(max_length=7, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='Zone',
            fields=[
                ('zone_name', models.CharField(max_length=255, primary_key=True, serialize=False)),
            ],
        ),
        migrations.CreateModel(
            name='CPAS_User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email_address', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('sub_region', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('region', models.CharField(max_length=255)),
                ('zone', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.zone')),
            ],
        ),
        migrations.CreateModel(
            name='ProducedIn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('average_commodity_price', models.FloatField()),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.crops')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.season')),
            ],
            options={
                'unique_together': {('crop', 'year')},
            },
        ),
        migrations.CreateModel(
            name='DiseasePresence',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('disease_presence_status', models.CharField(max_length=2)),
                ('disease_incidence_year_percentage', models.FloatField()),
                ('disease_incidence_area_percentage', models.FloatField()),
                ('disease_severity_without_control_percentage', models.FloatField(null=True)),
                ('disease_severity_with_control_percentage', models.FloatField(null=True)),
                ('disease_severity_control_genetic_contribution_percentage', models.FloatField(null=True)),
                ('disease_severity_control_cultural_contribution_percentage', models.FloatField(null=True)),
                ('disease_severity_control_pesticide_contribution_percentage', models.FloatField(null=True)),
                ('fungicide_resistance_risk', models.CharField(max_length=3)),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.crops')),
                ('disease', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.disease')),
                ('sub_region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.location')),
            ],
            options={
                'unique_together': {('disease', 'crop', 'sub_region')},
            },
        ),
        migrations.CreateModel(
            name='CropArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_hectares', models.FloatField()),
                ('value_tonnes', models.FloatField()),
                ('crop', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.crops')),
                ('sub_region', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.location')),
                ('year', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='CPAS_Main.season')),
            ],
            options={
                'unique_together': {('crop', 'sub_region', 'year')},
            },
        ),
    ]
