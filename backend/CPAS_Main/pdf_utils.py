from django.http import HttpResponse
from io import BytesIO
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT
from datetime import datetime

def create_crop_report_pdf(crop_data, location_data, season_data):
    """Create a PDF report for crop information"""
    buffer = BytesIO()
    doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, 
                           topMargin=72, bottomMargin=18)
    
    styles = getSampleStyleSheet()
    
    # Custom styles
    title_style = ParagraphStyle(
        name='CustomTitle',
        parent=styles['Heading1'],
        fontSize=18,
        spaceAfter=30,
        alignment=TA_CENTER,
        textColor=colors.darkblue
    )
    
    header_style = ParagraphStyle(
        name='CustomHeader',
        parent=styles['Heading3'],
        fontSize=12,
        spaceAfter=15,
        alignment=TA_LEFT,
        textColor=colors.darkblue
    )
    
    body_style = ParagraphStyle(
        name='CustomBody',
        parent=styles['Normal'],
        fontSize=10,
        spaceAfter=12,
        alignment=TA_LEFT
    )
    
    elements = []
    
    # Title
    title = Paragraph("Crop Production Analysis System Report", title_style)
    elements.append(title)
    elements.append(Spacer(1, 20))
    
    # Report date
    report_date = datetime.now().strftime("%B %d, %Y")
    elements.append(Paragraph(f"Generated on: {report_date}", body_style))
    elements.append(Spacer(1, 20))
    
    # Crop Information
    elements.append(Paragraph("Crop Information", header_style))
    
    if crop_data:
        crop_table_data = [
            ['Crop Name', crop_data.get('crop_name', 'N/A')],
            ['Season', season_data.get('year', 'N/A') if season_data else 'N/A'],
            ['Location', location_data.get('sub_region', 'N/A') if location_data else 'N/A'],
            ['Region', location_data.get('region', 'N/A') if location_data else 'N/A'],
            ['Zone', location_data.get('zone', 'N/A') if location_data else 'N/A']
        ]
        
        crop_table = Table(crop_table_data, colWidths=[2*inch, 4*inch])
        crop_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        elements.append(crop_table)
    else:
        elements.append(Paragraph("No crop data available", body_style))
    
    elements.append(Spacer(1, 20))
    
    # Production Data
    elements.append(Paragraph("Production Data", header_style))
    
    if crop_data and 'area_hectares' in crop_data and 'value_tonnes' in crop_data:
        production_data = [
            ['Area (Hectares)', str(crop_data['area_hectares'])],
            ['Production (Tonnes)', str(crop_data['value_tonnes'])],
            ['Yield (Tonnes/Hectare)', f"{crop_data['value_tonnes']/crop_data['area_hectares']:.2f}" if crop_data['area_hectares'] > 0 else 'N/A']
        ]
        
        production_table = Table(production_data, colWidths=[2*inch, 4*inch])
        production_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgrey),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        elements.append(production_table)
    else:
        elements.append(Paragraph("No production data available", body_style))
    
    elements.append(Spacer(1, 20))
    
    # Footer
    elements.append(Paragraph("Generated by CPAS (Crop Production Analysis System)", body_style))
    
    # Build PDF
    doc.build(elements)
    
    pdf = buffer.getvalue()
    buffer.close()
    
    return pdf